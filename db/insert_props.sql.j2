{%- from 'macros.sql.j2' import create_dictionary, fill_dictionary %}
{%- from 'macros.sql.j2' import create_array, fill_array %}

{%- set raw_table = config.raw_table %}


{%- for d in dictionaries  %}
  {{ create_dictionary(d.name) }}
{%- endfor %}

with
  aggregated_values as (
    select
{%- for d in dictionaries  %}
      jsonb_object_agg(
        coalesce(trim(data->>'{{ d.field }}'), ''),
        null
      ) as {{ d.name }},
{%- endfor %}
      1
      from {{ raw_table }}
  ),
{%- for d in dictionaries  %}
  {{ d.name }}_insert as (
    insert into {{ d.name }} (value)
      select new.value
      from
        aggregated_values vs,
        jsonb_object_keys(vs.{{ d.name }}) new(value)
      where new.value != ''
        and not exists
          (select 1 from {{ d.name }} dict where new.value = dict.value)
    returning 1
  ),
{%- endfor %}
  result as (
    select null as dictionary, null as inserted
{%- for d in dictionaries  %}
    union all
    select '{{ d.name }}', count(*) from {{ d.name }}_insert
{%- endfor %}
  )
  select * from result;


create table if not exists document_props(
  id bytea primary key,
{%- for d in dictionaries  %}
  {{ d.field }} int4 references {{ d.name }},
{%- endfor %}
  -- add non-dictionaries
  dummy text
);

delete from {{ raw_table }} raw
  where exists (
    select 1
      from document_props ps
      where decode(raw.id, 'hex') = ps.id);

insert into document_props
  select
    decode(raw.id, 'hex'),
{%- for d in dictionaries  %}
    {{ d.name }}.id,
{%- endfor %}
    null
  from
    {{ raw_table }} raw
{%- for d in dictionaries  %}
    left outer join {{ d.name }}
      on ({{ d.name }}.value = trim(raw.data->>'{{ d.field }}'))
{%- endfor %}
  on conflict do nothing;


{%- for a in arrays  %}
  {{ create_array(a.name) }}
  {{ fill_array(a.name, raw_table, a.field) }}
{%- endfor %}
