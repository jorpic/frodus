{%- from 'macros.sql.j2' import create_dictionary, fill_dictionary %}
{%- from 'macros.sql.j2' import create_array, fill_array %}

{%- set raw_table = config.raw_table %}

\timing on


{%- for d in dictionaries  %}
  {{ create_dictionary(d) }}
{%- endfor %}

with
  aggregated_values as (
    select
{%- for d in dictionaries  %}
      jsonb_object_agg(
        coalesce(trim(data->>'{{ d }}'), ''),
        null
      ) as {{ d }},
{%- endfor %}
      1
      from {{ raw_table }}
  ),
{%- for d in dictionaries  %}
  {{ d }}_insert as (
    insert into {{ d }} (value)
      select new.value
      from
        aggregated_values vs,
        jsonb_object_keys(vs.{{ d }}) new(value)
      where new.value != ''
        and not exists
          (select 1 from {{ d }} dict where new.value = dict.value)
    returning 1
  ),
{%- endfor %}
  result as (
    select null as dictionary, null as inserted
{%- for d in dictionaries  %}
    union all
    select '{{ d }}', count(*) from {{ d }}_insert
{%- endfor %}
  )
  select * from result;


create table if not exists case_props(
  id bytea primary key
{%- for t in timestamps  %}
  ,{{ t }} timestamp
{%- endfor %}
{%- for s in smallints  %}
  ,{{ s }} smallint
{%- endfor %}
{%- for d in dictionaries  %}
  ,{{ d }} int4 references {{ d }}(id)
{%- endfor %}
{%- for s in strings  %}
  ,{{ s }} text
{%- endfor %}
);


delete from {{ raw_table }} raw
  where exists (
    select 1
      from case_props ps
      where decode(raw.id, 'hex') = ps.id);


insert into case_props
  select
    decode(raw.id, 'hex')
{%- for t in timestamps  %}
    ,(raw.data->>'{{ t }}')::timestamp
{%- endfor %}
{%- for s in smallints  %}
    ,(raw.data->>'{{ s }}')::smallint
{%- endfor %}
{%- for d in dictionaries  %}
    ,{{ d }}.id
{%- endfor %}
{%- for s in strings  %}
    ,trim(raw.data->>'{{ s }}')
{%- endfor %}
  from
    {{ raw_table }} raw
{%- for d in dictionaries  %}
    left outer join {{ d }}
      on ({{ d }}.value = trim(raw.data->>'{{ d }}'))
{%- endfor %}
  on conflict do nothing;


{%- for a in arrays  %}
  {{ create_array(a) }}
  {{ fill_array(a, raw_table) }}
{%- endfor %}



create table if not exists case_text(
  doc_id bytea unique not null references case_props(id),
  value text not null
);

insert into case_text
  select
    decode(raw.id, 'hex'),
    to_json(raw.txt) #>> '{}'
  from {{ raw_table }} raw
  where
    to_json(raw.txt) #>> '{}' is not null
